import re
import os
import asyncio
import logging
from datetime import datetime
from telethon import TelegramClient, events, functions, types
from telethon.tl.custom import Button
from telethon.tl.types import User, MessageMediaPhoto, MessageMediaDocument
from config import API_ID, API_HASH, BOT_TOKEN, ADMIN_ID
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('notification_bot')

class NotificationBot:
    def __init__(self):
        # Create sessions directory if it doesn't exist
        os.makedirs('sessions', exist_ok=True)
        
        self.bot = TelegramClient('sessions/notification_bot', API_ID, API_HASH)
        self.bot.parse_mode = 'html'
        self.is_running = False
        self.search_mode = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        if self.is_running:
            logger.warning("–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            await self.bot.start(bot_token=BOT_TOKEN)
            self.is_running = True
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.register_command_handlers()
            
            logger.info("–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            self.is_running = False
            return False
    
    def register_command_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
        try:
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
            @self.bot.on(events.NewMessage(pattern='/start'))
            async def start_command(event):
                if event.chat_id != ADMIN_ID:
                    return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞
                
                await event.respond("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
                                   "–ö–æ–º–∞–Ω–¥—ã:\n"
                                   "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                                   "/–ø–æ–∏—Å–∫ - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏/—é–∑–µ—Ä–Ω–µ–π–º—É")
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–∏—Å–∫
            @self.bot.on(events.NewMessage(pattern='/–ø–æ–∏—Å–∫'))
            async def search_command(event):
                if event.chat_id != ADMIN_ID:
                    return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
                self.search_mode = True
                await event.respond("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ @username –¥–ª—è –ø–æ–∏—Å–∫–∞")
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞
            @self.bot.on(events.NewMessage(from_users=ADMIN_ID))
            async def handle_admin_message(event):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
                if event.text.startswith('/'):
                    return
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
                if self.search_mode:
                    search_query = event.text.strip()
                    
                    # –£–¥–∞–ª—è–µ–º @ –∏–∑ –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if search_query.startswith('@'):
                        search_query = search_query[1:]
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    user = db.get_user_by_username(search_query)
                    
                    if user:
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                        messages = db.get_messages_by_user_id(user['id'])
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        user_info = f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üëë\n\n"
                        if user['username']:
                            user_info += f"Username: @{user['username']}\n"
                        if user['first_name'] or user['last_name']:
                            user_info += f"–ò–º—è: {user['first_name']} {user['last_name']}\n"
                        if user['phone']:
                            user_info += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                        
                        await event.respond(user_info)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                        if messages:
                            history_text = "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
                            for msg in messages:
                                direction = "‚û°Ô∏è" if msg['is_incoming'] else "‚¨ÖÔ∏è"
                                timestamp = msg['timestamp']
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                                try:
                                    date_obj = datetime.fromisoformat(timestamp)
                                    date_str = date_obj.strftime("%Y-%m-%d %H:%M:%S")
                                except:
                                    date_str = timestamp
                                
                                history_text += f"{direction} {msg['message_text']}\n{date_str}\n\n"
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                                if len(history_text) > 3000:
                                    await event.respond(history_text)
                                    history_text = ""
                            
                            if history_text:
                                await event.respond(history_text)
                        else:
                            await event.respond("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
                    else:
                        await event.respond(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {search_query} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /–ø–æ–∏—Å–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
                    
                    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
                    self.search_mode = False
            
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: {str(e)}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        if not self.is_running:
            logger.warning("–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        try:
            await self.bot.disconnect()
            self.is_running = False
            logger.info("–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            
    async def send_notification(self, user_info: User, message_text: str, message_count: int = 1, event=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        if not self.is_running:
            logger.warning("–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            username = getattr(user_info, 'username', None)
            user_id = getattr(user_info, 'id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            first_name = getattr(user_info, 'first_name', '')
            last_name = getattr(user_info, 'last_name', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∞–º–∏–º –∞–¥–º–∏–Ω–æ–º
            if user_id == ADMIN_ID:
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ (ID: {ADMIN_ID})")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            display_name = ""
            if username:
                display_name = f"@{username}"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
                if first_name or last_name:
                    display_name = f"{first_name} {last_name}".strip()
                else:
                    # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                    display_name = f"user_id:{user_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–º –∏–ª–∏ –º–µ–¥–∏–∞
            is_media = False
            original_message = None
            media_text = None
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if event and hasattr(event, 'message'):
                original_message = event.message
            elif hasattr(user_info, '_message') and user_info._message:
                original_message = user_info._message
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if original_message:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä
                if hasattr(original_message, 'sticker') and original_message.sticker:
                    is_media = True
                    media_text = "üì± [–°—Ç–∏–∫–µ—Ä]"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞
                elif hasattr(original_message, 'media') and original_message.media:
                    is_media = True
                    media = original_message.media
                    
                    if isinstance(media, MessageMediaPhoto):
                        media_text = "üì∑ [–§–æ—Ç–æ]"
                    elif isinstance(media, MessageMediaDocument):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º mime-—Ç–∏–ø, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                        if hasattr(media.document, 'mime_type'):
                            mime_type = media.document.mime_type
                            if 'video' in mime_type:
                                media_text = "üé¨ [–í–∏–¥–µ–æ]"
                            elif 'audio' in mime_type:
                                media_text = "üéµ [–ê—É–¥–∏–æ]"
                            elif 'image' in mime_type:
                                media_text = "üì∑ [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]"
                            else:
                                media_text = "üì± [–ú–µ–¥–∏–∞]"
                        else:
                            media_text = "üì± [–ú–µ–¥–∏–∞]"
                    else:
                        media_text = "üì± [–ú–µ–¥–∏–∞]"
                
                # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if is_media and media_text:
                    message_text = media_text
            
            # –ü–†–û–°–¢–ê–Ø –ü–†–Ø–ú–ê–Ø –ü–ï–†–ï–°–´–õ–ö–ê –ú–ï–î–ò–ê
            media_forwarded = False
            if is_media and original_message and event and hasattr(event, '_client'):
                try:
                    logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞—é –º–µ–¥–∏–∞ ({media_text}) –Ω–∞–ø—Ä—è–º—É—é –≤ –±–æ—Ç–∞...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    client = event._client
                    message_id = original_message.id
                    chat_id = event.chat_id
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è)
                    bot_id = int(BOT_TOKEN.split(':')[0])
                    logger.info(f"ID –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {bot_id}")
                    
                    # –ü–†–Ø–ú–ê–Ø –ü–ï–†–ï–°–´–õ–ö–ê —á–µ—Ä–µ–∑ forward_messages –í –ë–û–¢–ê
                    forwarded = await client.forward_messages(
                        entity=bot_id,         # ID –±–æ—Ç–∞
                        messages=message_id,   # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                        from_peer=chat_id      # ID —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    )
                    
                    if forwarded:
                        logger.info(f"–ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –±–æ—Ç–∞!")
                        
                        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç –±–æ—Ç–∞ –∞–¥–º–∏–Ω—É
                        try:
                            await self.bot.forward_messages(
                                entity=ADMIN_ID,         # ID –∞–¥–º–∏–Ω–∞
                                messages=forwarded.id,   # ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                from_peer=bot_id         # ID –±–æ—Ç–∞ (–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å)
                            )
                            logger.info(f"–ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –±–æ—Ç–∞ –∞–¥–º–∏–Ω—É!")
                            media_forwarded = True
                        except Exception as e2:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç –±–æ—Ç–∞ –∞–¥–º–∏–Ω—É: {e2}")
                    else:
                        logger.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –±–æ—Ç–∞")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞ –≤ –±–æ—Ç–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–¥–∏–∞ –∏–ª–∏ –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å
            if not is_media or not media_forwarded:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                if message_count == 1:
                    notification_text = (
                        f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>üëë\n"
                        f"{message_text}üó®Ô∏è\n\n"
                        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ({display_name})üíõ"
                    )
                else:
                    notification_text = (
                        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ ({message_count})!</b>üëë\n"
                        f"{message_text}üó®Ô∏è\n\n"
                        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ({display_name})üíõ"
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db.save_message(
                    user_id=user_id,
                    username=username or "",
                    first_name=first_name,
                    last_name=last_name,
                    message_text=message_text,
                    is_incoming=True
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                buttons = []
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å username, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ t.me/username
                if username:
                    buttons.append(Button.url("–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É üöÄ", f"https://t.me/{username}"))
                else:
                    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ username –∏—Å–ø–æ–ª—å–∑—É–µ–º tg://user?id
                    if isinstance(user_id, int) or (isinstance(user_id, str) and user_id.isdigit()):
                        buttons.append(Button.url("–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É üöÄ", f"tg://user?id={user_id}"))
                
                try:
                    await self.bot.send_message(
                        ADMIN_ID, 
                        notification_text, 
                        buttons=buttons if buttons else None, 
                        parse_mode='html'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
                    return False
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {display_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
notification_bot = NotificationBot()
